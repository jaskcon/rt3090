#! /bin/sh /usr/share/dpatch/dpatch-run
## net_device_ops.dpatch by  <markus@mheberling1>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad rt3090~/os/linux/rt_linux.c rt3090/os/linux/rt_linux.c
--- rt3090~/os/linux/rt_linux.c	2009-12-17 22:38:51.000000000 +0100
+++ rt3090/os/linux/rt_linux.c	2009-12-17 22:44:27.000000000 +0100
@@ -1530,23 +1530,26 @@
 	IN RTMP_OS_NETDEV_OP_HOOK *pDevOpHook)
 {	
 	int ret, rtnl_locked = FALSE;
+	static struct net_device_ops ralink_netdev_ops;
 
 	DBGPRINT(RT_DEBUG_TRACE, ("RtmpOSNetDevAttach()--->\n"));
 	// If we need hook some callback function to the net device structrue, now do it.
 	if (pDevOpHook)
 	{
 		PRTMP_ADAPTER pAd = RTMP_OS_NETDEV_GET_PRIV(pNetDev);
-	
-		pNetDev->open			= pDevOpHook->open;
-		pNetDev->stop			= pDevOpHook->stop;
-		pNetDev->hard_start_xmit	= (HARD_START_XMIT_FUNC)(pDevOpHook->xmit);
-		pNetDev->do_ioctl		= pDevOpHook->ioctl;
-		
+
+		pNetDev->netdev_ops = &ralink_netdev_ops;
+
+		ralink_netdev_ops.ndo_open = pDevOpHook->open;
+		ralink_netdev_ops.ndo_stop = pDevOpHook->stop;
+		ralink_netdev_ops.ndo_start_xmit = (HARD_START_XMIT_FUNC)(pDevOpHook->xmit);
+		ralink_netdev_ops.ndo_do_ioctl = pDevOpHook->ioctl;
+
 		/* if you don't implement get_stats, just leave the callback function as NULL, a dummy 
 		     function will make kernel panic.
 		*/
 		if (pDevOpHook->get_stats)
-			pNetDev->get_stats = pDevOpHook->get_stats;
+			ralink_netdev_ops.ndo_get_stats = pDevOpHook->get_stats;
 
 		/* OS specific flags, here we used to indicate if we are virtual interface */
 		pNetDev->priv_flags = pDevOpHook->priv_flags; 
@@ -1580,7 +1583,7 @@
 	}
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
-	pNetDev->validate_addr = NULL;
+	ralink_netdev_ops.ndo_validate_addr = NULL;
 #endif
 
 	if (rtnl_locked)
